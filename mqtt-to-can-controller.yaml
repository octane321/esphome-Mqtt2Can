# JK-BMS-CAN ( PYLON, Seplos, GoodWe, SMA and Victron CAN bus protocol )

# esp32_ble_jk-bms-can.yaml is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

# V1.17.3 Sleeper85 : Renumbering cells, Added “JK-BMS ESP32 Restart” switch, adding Total Daily Energy sensors, set jk_bms update interval to 3s, set default log level to INFO, improvement of comments
# V1.17.2 MrPablo   : Added function "Auto Charge/Discharge Current Control" to avoid OVP/UVP alarms
# V1.17.1 Sleeper85 : New Cut-Off Current/Voltage Charging Logic for LFP with the participation of @shvmm
# V1.16.6 Sleeper85 : Selectable CAN settings + Adding inverter_offset_v + Improved CAN ID 0x355, sending 100% only at the end of the absorption phase, adding bytes [04:05] and [06:07] + Automatic calculation of the number of battery modules + Save and Restore slider values
# V1.16.5 Sleeper85 : Add Preventive Alarms Logic, CAN ID 0x356: send average temperature of T1/T2, new "Discharging current max" and "Balancing current max" slider
# V1.16.4 Sleeper85 : Improved Charging Logic for ESP32 startup/reboot and Float charge, Add CAN ID 0x356 bytes [06:07] cycles for Sofar, Change switch name
# V1.16.3 Sleeper85 : ID 0x379 will be sent when choosing protocol 2 or 4 (Battery Capacity for Victron, Sol-Ark and Luxpower)
# V1.16.2 Sleeper85 : Split the "Charge/Discharge values" section and added instructions for "Stop Discharging" + Set "esp-idf" framework by default
# V1.16.1 Sleeper85 : Slider charging_current max value = ${charge_a}, Improved Alarm/Charging/Discharging Logic, Improved CAN protocol and Victron support
# V1.15.5 Sleeper85 : Improved code and set api "reboot_timout" to "0s" by default (no reboot without HA)
# V1.15.4 Sleeper85 : Improved documentation for API, Web Server and WiFi settings
# V1.15.3 Sleeper85 : Add 'CAN Protocol Settings' and new CAN ID based on the SMA and Victron protocol (alpha)
# V1.15.2 Sleeper85 : Improved Alarm handling, all alarms will set charge/discharge current to 0A and set 'Charging Status' to Alarm
# V1.15.1 Sleeper85 : New CANBUS script with CANBUS Status in HA, stop sending CAN messages if the inverter is not responding (fix WDT reboot issues)
# V1.14.3 Sleeper85 : Improved documentation + Charging Voltage tips for Deye
# V1.14.2 Sleeper85 : Improve 'Charging Voltage' behavior
# V1.14.1 Sleeper85 : Add 'Float charge function'
# V1.13.6 Sleeper85 : Add 'Absorption time' and 'Absorption Offset V.' slider
# V1.13.5 Sleeper85 : Set CAN manufacter to "PYLON" for improve compatibility with Deye and other inverters
# V1.13.4 Sleeper85 : Improve 'Charge Status' behavior + add 'Rebulk Offset V.' slider
# V1.13.3 uksa007   : Improve compatibility with Deye and other inverters
# V1.13.2 uksa007   : Send Max Temperature of T1, T2 to inverter
# V1.13.1 uksa007   : Fix compile issues with new version of ESPhome 2023.4.0, set rebulk offset to 2.5

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip}                                                  # Set this to the IP of the ESP
    gateway: !secret gateway                                          # Set this to the IP address of the router. Often ends with .1
    subnet: !secret subnet                                            # The subnet of the network. 255.255.255.0 works for most home networks.
    dns1: !secret dns1                                                # Set this to the IP address of the router. same as gateway.
  reboot_timeout: 5min

  ap:                                                                 # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: "${mqtt_id} Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

ota:
  password: !secret ota_password

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: ${mqtt_id}
  client_id: ${mqtt_id}
  topic_prefix: ${prefix}/${subtopic}
  discovery: false
  log_topic: ${prefix}/${subtopic}/99_Info/00_Debug/00_Payload
  birth_message:
    topic: ${prefix}/${subtopic}/99_Info/07_MQTT_Connection
    payload: 1
  will_message:
    topic: ${prefix}/${subtopic}/99_Info/07_MQTT_Connection
    payload: 0
  shutdown_message:
    topic: ${prefix}/${subtopic}/99_Info/07_MQTT_Connection
    payload: -1

packages:
  # INCLUDE logic part
  logic: !include                 custom/mqtt-to-can-controller/logic.yaml
  # INCLUDE device SmartShunt
  sensors_shunt: !include         custom/mqtt-to-can-controller/sensors_shunt.yaml
  # INCLUDE some global sensors
  sensors_global: !include        
    file:                         custom/mqtt-to-can-controller/sensors_global.yaml
    vars:
      bms: '1'                                                                                              # the the number of cells from selected bms will be used to determine "Auto Charge Current Control"
  # INCLUDE BMS devices
  bms1_sensors: !include
    file:                         custom/mqtt-to-can-controller/sensors_jk_bms.yaml
    vars:
      bms:                        '1'
  bms2_sensors: !include
    file:                         custom/mqtt-to-can-controller/sensors_jk_bms.yaml
    vars:
      bms:                        '2'
  bms3_sensors: !include
    file:                         custom/mqtt-to-can-controller/sensors_jk_bms.yaml
    vars:
      bms:                        '3'

  # INCLUDE logic to combine all BMS data into one virtual "bms0"
  sensors_combine: !include
   file:                      custom/mqtt-to-can-controller/combine.yaml
   vars:
     bms:                      '0'

substitutions:
# +--------------------------------------+
  # name that will appear in esphome and homeassistant.
  name: mqtt-to-can-controller
# +--------------------------------------+
# | Battery Charge Settings              |
# +--------------------------------------+
  # This is max charging amps eg 100A, for Bulk - Constant Current charging(CC), should be at least 10A less than BMS change current protection, 0.5C max
  # 100A * 50V = 5000W
  charge_a: "150"
  # Float Voltage : corresponds to the voltage at which the battery would be maintained at the end of the absorption phase. (53.6v eg 3.35v/cell for 16 cells 48V battery)
  float_v: "54.0"
  # Bulk / Absorption Voltage : corresponds to the Bulk voltage that will be used to charge the battery. (55.2v eg 3.45v/cell for 16 cells 48V battery)
  bulk_v: "55.0" #absorption_v

  # Rebulk voltage, voltage less than FLOAT at which BMS requests rebulk. (52.8V = 3.3V/Cell for 16S battery)
  rebulk_v: "53.0"
        # Rebulk offset, x Volts below absorption voltage battery will request rebulk, eg 55.2-2.4 = 52.8V (3.3V/cell)
        #rebulk_offset_v: "2.0"

# +--------------------------------------+
# | Use the settings below with caution  |
# +--------------------------------------+
  # Inverter offset, allows you to correct the inverter charging voltage
  # For example, with my Deye, if the requested charging voltage is 55.2v the Deye effective charging voltage will be 55.1v
  # An offset of 0.1 provides an effective charging voltage of 55.2v
  inverter_offset_v: "0.0"
  # Auto charge current control will automatically reduce the charging current as a cell reaches the BMS "cell_voltage_overvoltage_recovery".
  # If unsure, leave the below settings as default, this will ensure charge current will taper correctly.
  # Factor to control the end of the charge current curve. A setting below 2 will extend the curve, above 2 will shorten the curve. 
  charge_a_factor_curve_end: "2.0"
  # Factor to adjust the shape of the charge current curve.
  # A setting below 1 will reduce current at a slow rate after the float voltage is reached, then increase as a cell reaches the BMS "cell_voltage_overvoltage_recovery".
  # A factor above 1 will reduce current at a fast rate after the float voltage is reached, then slow as a cell reaches the BMS "cell_voltage_overvoltage_recovery".
  charge_a_factor_curve_shape: "1.8"
# +--------------------------------------+
# | Battery Discharge Settings           |
# +--------------------------------------+
  # Max discharge amps eg 120, should be at least 10A less than BMS over discharge current protection, 0.5C max
  # 120A * 50V = 6000W
  discharge_a: "150"
  # Minimum discharge voltage eg 48v/16 = 3V per cell
  min_discharge_v: "48"
  # Minimum discharge State of Charge
  min_discharge_soc: "10"

# +--------------------------------------+
# | Use the settings below with caution  |
# +--------------------------------------+
  # Auto discharge current control will automatically reduce the charging current as a cell reaches the BMS "cell_voltage_undervoltage_recovery".
  # If unsure, leave the below settings as default, this will ensure discharge current will taper correctly.
  # Factor to control the end of the discharge current curve. A setting below 2 will extend the curve, above 2 will shorten the curve. 
  discharge_a_factor_curve_end: "2.0"
  # Factor to adjust the shape of the charge current curve.
  # A setting below 1 will reduce current at a slow rate after the float voltage is reached, then increase as a cell reaches the BMS "cell_voltage_undervoltage_recovery".
  # A factor above 1 will reduce current at a fast rate after the float voltage is reached, then slow as a cell reaches the BMS "cell_voltage_undervoltage_recovery".
  discharge_a_factor_curve_shape: "1.8"
  # Discharge knee voltage, the point at which a cell will reduce in voltage more rapidly. For LiFePO4 cells, this is generally considered to be 3.1v.
  discharge_knee_v: "3.1"
# +--------------------------------------+
# | Battery State of Health (SOH)        |
# +--------------------------------------+
  # Maximum charging cycles is used to calculate the battey SOH, LF280K v3 =8000.0, LF280K v2 =6000.0, LF280=3000.0 (decimal is required)
  max_cycles: "6000.0"
# +--------------------------------------+
# | Preventive Alarms Logic              |
# +--------------------------------------+
  # Information from the EVE LF280K v2 cell datasheet
  # LFP Recommended Operating Temperature Range : 10~45°C
  # Number of cycles at 25°C : 6000
  # Number of cycles at 45°C : 2500
  # 60°C  : Never charging or discharging
  # 0°C   : Never charging
  # -30°C : Never discharging
  # +--------------------------------------+
  # High Temp Protection - Temp > OTP : Stop Charging and Discharging
  otp: "45.0"
  # Low Temp Protection  - Temp < UTP : Stop Charging
  utp: "1.0"
# +--------------------------------------+
# | ESP32 CAN port pins                  |
# +--------------------------------------+
  # GPIO pins your CAN bus transceiver (TJA1050, TJA1051T or SN65HVD230) is connected to the ESP, note! TX->TX and RX->RX. 
  can_tx_pin: GPIO23
  can_rx_pin: GPIO22

# +--------------------------------------+
# | Custom Override Substitutions        |
# +--------------------------------------+
  device_description: "subscribes to mqtt and controls many Inverter via CAN Bus - https://github.com/Sleeper85/esphome-jk-bms-can"
  prefix: DEV                                                # the mqtt path will be like -> ${prefix}/${subtopic}
  subtopic: CAN_Controller
  mqtt_id: CAN_Controller
  ip: 192.168.1.181                                           # static IP of the ESP
  bms: '1'                                                    # dev fallback (not used when productive)

# +--------------------------------------+
# | esphome setup                        |
# +--------------------------------------+
esphome:
  name: ${name}
  comment: ${device_description}
  on_boot:
    priority: -100
    then:
 # create command topics for ESP
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/97_Buttons/99_ESP_restart
          payload: "PRESS "
 #   create command topics for Charge_Setup
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/01_Bulk_Voltage/set
          payload: " "
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/03_Float_Voltage/set
          payload: " "
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/04_Rebulk_Voltage/set
          payload: " "
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/09_Absorbtion_Offset/set
          payload: " "
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/10_Charge_Current_max/set
          payload: " "
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/11_Discharge_Current_max/set
          payload: " "
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/20_Charging_enabled/set
          payload: "on/off"
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/21_Discharging_enabled/set
          payload: "on/off"
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/22_Floatmode_enabled/set
          payload: "on/off"
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/23_Top_Balance_Override/set
          payload: "on/off"
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/24_Automatic_Charge_Current/set
          payload: "on/off"
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/90_Charge_Setup/25_Automatic_Discharge_Current/set
          payload: "on/off"
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/91_CAN_Setup/01_CAN_BMS_Name/set
          payload: "GENERAL:GENERAL;PYLON:PYLON;GOODWE:GOODWE;SEPLOS:SEPLOS"
      - mqtt.publish:
          topic: ${prefix}/${subtopic}/91_CAN_Setup/02_CAN_Protocol/set
          payload: "GENERAL:GENERAL;PYLON 1.2:PYLON 1.2;PYLON +:PYLON +;SMA:SMA;VICTRON:VICTRON"

# +--------------------------------------+
# | ESP32 settings                       |
# +--------------------------------------+
# For a stable Bluetooth connection keep the "esp-idf" framework
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf

logger:
  level: WARN

debug:
  update_interval: 5s

web_server:
  port: 80
  log: false
  ota: false

# +--------------------------------------+
# | ** Don't make changes below this **  |
# +--------------------------------------+

output:
  - platform: gpio
    pin: 2
    id: led
    inverted: true

light:
  - platform: binary
    output: led
    id: blue_led
    name: "Blue LED"
    internal: true

# +--------------------------------------+
# | Start CAN Handling                   |
# +--------------------------------------+
canbus: # 0x305 - Inverter ACK - SMA/LG/Pylon/Goodwe reply
  - platform: esp32_can
    tx_pin: ${can_tx_pin}
    rx_pin: ${can_rx_pin}
    can_id: 4
    bit_rate: 500kbps
    on_frame:
    - can_id: 0x305
      then:
        - light.toggle:
            id: blue_led
        - lambda: |-
            id(can_ack_counter) = 0;                              // Reset ACK counter
            id(can_bus_status).publish_state(true);               // Set CANBUS Status to ON

            ESP_LOGI("main", "received can id: 0x305 ACK");

button:
 # ESP restart button
  - platform: restart
    name: "9799 restart ESP"
    id: "restart_ESP"
    state_topic: ${prefix}/${subtopic}/97_Buttons/99_ESP_restart
    command_topic: ${prefix}/${subtopic}/97_Buttons/99_ESP_restart

sensor:
 # ESP Uptime sensor
  - platform: uptime
    name: "9904 ESP Uptime (s)"
    id: uptime_sensor
    update_interval: 10s
    state_topic: ${prefix}/${subtopic}/99_Info/04_ESP_Uptime/seconds
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

 # WiFi Signal db sensor
  - platform: wifi_signal
    name: "9903 ESP WiFi Signal dBm"
    id: wifi_signal_db
    update_interval: 10s
    state_topic: ${prefix}/${subtopic}/99_Info/03_WiFi_Signal/db

 # WiFi Signal % sensor
  - platform: copy
    source_id: wifi_signal_db
    name: "9903 ESP WiFi Signal %"
    filters:
    - delta: 5
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    state_topic: ${prefix}/${subtopic}/99_Info/03_WiFi_Signal

 # ESP debug sensor
  - platform: debug
    free:
      name: "990001 free Heap"
      filters:
        - multiply: 0.001024
        #- delta: 5
      accuracy_decimals: 3
      unit_of_measurement: "kB"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/01_free_Heap
    block:
      name: "990002 Largest contiuous free RAM Block"
      filters:
        - multiply: 0.001024
        - delta: 50
      accuracy_decimals: 3
      unit_of_measurement: "kB"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/02_Largest_free_Block
    loop_time:
      name: "990004 Loop Time"
      filters:
        - delta: 5
      unit_of_measurement: "ms"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/04_Loop_Time

text_sensor:
 # Wifi text_sensor
  - platform: wifi_info
    ip_address:
      name: "9909 ESP IP Address"
      state_topic: ${prefix}/${subtopic}/99_Info/09_IP_Address
      update_interval: 300s

 # ESP Uptime text_sensor
  - platform: template
    name: "9904 ESP Uptime"
    id: uptime_human
    state_topic: ${prefix}/${subtopic}/99_Info/04_ESP_Uptime

 # DEBUG text_sensor
  - platform: debug
    device:
      name: "990005 Device Info"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/05_Device_Info
    reset_reason:
      name: "990006 Reset Reason"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/06_Reset_Reason